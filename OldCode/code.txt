const

/*====== GRAVITY ====== */
//static int jumpCounter = 0;
//const float maxFall    = 0.5F;				//Max fall velocity
//const float runAcc     = 0.001F;			//Running acceleration
//const float jumpAcc    = -0.05F;			//Jump acceleration
//const float maxSpeed   = 0.30F;
//const float maxAcc     = -0.1;
//
//static sf::Vector2f vel(0.f, 0.f);
//static sf::Vector2f gravity(0.f, 0.003f);
//
//const int jumpFrames   = 10;				//Number of frames to accelerate in
//
//static bool hitGround  = false;
//static bool hitSidesOrBelow = false;
//static float hitTimer  = 5.0;
/*===================== */

void Game::playerCOllide2. .. . 
/* WORKS */
		/* TODO: Fix the random values*/

		/* Sprite hit from right side */
		/* A bit different: uses f_player.height. Makes more sense
		   but cant get it working for the other functions */
		if ((v_player.x - 1.0) < v_sprite.x - f_player.height) {
			movePlayer(-1.0, 0.0);
		}


		/* Sprite hit from left side */
		else if ((v_player.x - 18) > v_sprite.x + (f_sprite.width)) {
			movePlayer(1, 0.0);
		}


		/* Sprite hit from top side */
		else if (v_player.y <= v_sprite.y + (f_sprite.height)) {
			movePlayer(0.0, -1.0);
		}

		
		/* Sprite hit from bot side*/
		else if (v_player.y >= v_sprite.y + (f_sprite.height)) {
			movePlayer(0.0, 1.0);				

		}





void Game::playerCollide(RectangleShape sprite, float xDir, float yDir) {
	sf::RectangleShape pp = player->getPlayer();
	if (sprite.getGlobalBounds().intersects(pp.getGlobalBounds())) {
		movePlayer(xDir, yDir);	
        
        
    (Saving incase: super old:)
        //	if (sprite.getGlobalBounds().intersects(player->getPlayer().getGlobalBounds())) {

}



iswindowopen
		/*FPS timer, doesnt work o,o*/

		//	Text			fps;						//FPS display
		//	Time			time;						//FPS display
		//	Clock			renderClock, updateClock;	//FPS display

		//time = renderClock.getElapsedTime();
		//float fFps = 1000000 / time.asMicroseconds();
		//std::stringstream s;
		//s << fFps << " fps";				
		//fps.setString(s.str());
		//renderClock.restart();





        
















/*	
http://riseagain.wordpress.com/2012/07/17/sfml-2-tutorial-pong/
http://www.wildbunny.co.uk/blog/2011/04/06/physics-engines-for-dummies/	
https://gist.github.com/anonymous/4444729
//Collision detection with other objects (blocks)
https://github.com/eXpl0it3r/Examples/blob/master/SFML/SimpleAABB.cpp


Moving shape up, down, left, right
http://www.sfml-dev.org/tutorials/2.0/graphics-transform.php

*/













